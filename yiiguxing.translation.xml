<application>
  <component name="AppStorage">
    <histories>
      <item value="* &lt;p&gt;Singleton pattern ensures that the class can have only one existing instance per Java * classloader instance and provides global access to it.&lt;/p&gt; * * &lt;p&gt;One of the risks of this pattern is that bugs resulting from setting a singleton up in a * distributed environment can be tricky to debug, since it will work fine if you debug with a * single classloader. Additionally, these problems can crop up a while after the implementation of * a singleton, since they may start out synchronous and only become async with time, so it may * not be clear why you are seeing certain changes in behaviour.&lt;/p&gt; * * &lt;p&gt;There are many ways to implement the Singleton. The first one is the eagerly initialized * instance in {@link IvoryTower}. Eager initialization implies that the implementation is thread * safe. If you can afford giving up control of the instantiation moment, then this implementation * will suit you fine.&lt;/p&gt; * * &lt;p&gt;The other option to implement eagerly initialized Singleton is enum based Singleton. The * example is found in {@link EnumIvoryTower}. At first glance the code looks short and simple. * However, you should be aware of the downsides including committing to implementation strategy, * extending the enum class, serializability and restrictions to coding. These are extensively * discussed in Stack Overflow: http://programmers.stackexchange.com/questions/179386/what-are-the-downsides-of-implementing * -a-singleton-with-javas-enum&lt;/p&gt;" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1" />
        <entry key="ENGLISH" value="2" />
      </map>
    </option>
  </component>
</application>